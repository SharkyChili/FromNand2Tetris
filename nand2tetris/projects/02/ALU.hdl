// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //其实Mux函数就是一个if函数，不同的地方在于，判断条件是sel是否为0，为0则输入前一个，不为0则输出后一个
    //zx和nx
    Mux16(a =x, b = false, sel = zx, out = tmp1);
    Not16(in = tmp1, out = tmp2);
    Mux16(a = tmp1, b = tmp2, sel = nx, out = tmp3);

    //zy和ny
    Mux16(a =y, b = false, sel = zy, out = tmp4);
    Not16(in = tmp4, out = tmp5);
    Mux16(a = tmp4, b = tmp5, sel = ny, out = tmp6);

    //f
    Add16(a = tmp3, b = tmp6, out = tmp7);
    And16(a = tmp3, b = tmp6, out = tmp8);
    Mux16(a = tmp8, b = tmp7, sel = f, out = tmp9);

    //no
    Not16(in = tmp9, out = tmp10);
    Mux16(a = tmp9, b = tmp10,sel = no, out = outtmp);

    //out和ng,注意想取片段只能在out输出时取
    Or16(a = outtmp, b = false, out[15] = ng,out[0..7] = tmp11,out[8..15] = tmp12, out = out);

    //zr
    Or8Way(in = tmp11, out = tmp13);
    Or8Way(in = tmp12, out = tmp14);
    Or(a = tmp13, b = tmp14, out = tmp15);
    Not(in = tmp15, out = zr);
}